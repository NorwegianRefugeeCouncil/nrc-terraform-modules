name:  Build and Deploy

on: 
  workflow_dispatch: 
    inputs: 
      environment: 
        description:  "Select the environment to deploy"
        type:  choice
        options: 
          - development
          - production
        required:  true

jobs: 
  Build: 
    runs-on:  ubuntu-latest
    environment: 
      name:  ${{github.event.inputs.environment}}
    defaults: 
      run: 
        shell:  bash
        working-directory:  ./
    steps: 
      - name:  Checkout code
        uses:  actions/checkout@v2

      - name:  Docker Login
        uses:  azure/docker-login@v1
        with: 
          login-server:  ${{vars.ACR_LOGIN_SERVER}}
          username:  ${{secrets.ACR_USER_NAME}}
          password:  ${{secrets.ACR_PASSWORD}}

      - name:  Configure Azure credentials
        uses:  azure/login@v1
        with: 
          creds:  ${{secrets.AZURE_CREDENTIALS}}

      - run:  |
          docker build -t "${{vars.ACR_LOGIN_SERVER}}/${{vars.APP_IMAGE_NAME}}: ${{github.sha}}" -f build/package/app.Dockerfile .
          docker push "${{vars.ACR_LOGIN_SERVER}}/${{vars.APP_IMAGE_NAME}}: ${{github.sha}}"

  Deploy: 
    #needs:  [Build]
    runs-on:  ubuntu-latest
    environment: 
      name:  ${{github.event.inputs.environment}}
    defaults: 
      run: 
        shell:  bash
      
    env: 
      TF_VAR_app_name: ${{vars.app_name}}
      TF_VAR_environment: ${{vars.environment}}
      TF_VAR_subscription_id: ${{vars.subscription_id}}
      TF_VAR_location: ${{vars.location}}
      TF_VAR_app_service_plan_sku_name: ${{vars.app_service_plan_sku_name}}
      TF_VAR_vnet_address_space: ${{vars.vnet_address_space}}
      TF_VAR_app_subnet_address_space: ${{vars.app_subnet_address_space}}
      TF_VAR_app_db_address_space: ${{vars.app_db_address_space}}
      TF_VAR_postgres_availability_zone: ${{vars.postgres_availability_zone}}
      TF_VAR_postgres_geo_redundant_backup_enabled: ${{vars.postgres_geo_redundant_backup_enabled}}
      TF_VAR_postgres_standby_availability_zone: ${{vars.postgres_standby_availability_zone}}
      TF_VAR_dns_zone_name: ${{vars.dns_zone_name}}
      ARM_CLIENT_ID:  ${{ vars.INFRA_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET:  ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID:  ${{ vars.INFRA_SUBSCRIPTION_ID }}
      ARM_TENANT_ID:  ${{ vars.INFRA_AD_TENANT_ID }}

    steps: 
      - name:  Select Environment
        run:  |
          echo "Deploying to:  ${{github.event.inputs.environment}}"

      - name:  Checkout Code
        uses:  actions/checkout@v3

      - name:  Configure Azure Credentials
        uses:  azure/login@v1
        with: 
          creds:  ${{secrets.AZURE_CREDENTIALS}}
        
      - name:  Setup terraform
        uses:  hashicorp/setup-terraform@v2
        with: 
          terraform_version:  ${{vars.TERRAFORM_VERSION}}

      - name:  Terraform fmt
        id:  fmt
        run:  terraform fmt  -check

      - name:  Terraform Init
        id:  init
        run:  |
          cd ${{GITHUB.workspace}}/deploy/terraform;
          terraform init  -no-color \
          -backend-config="subscription_id=${{vars.INFRA_SUBSCRIPTION_ID}}" \
          -backend-config="storage_account_name=${{vars.INFRA_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=${{vars.INFRA_STORAGE_CONTAINER_NAME}}" \
          -backend-config="key=${{vars.ENVIRONMENT}}.tfstate" \
          -backend-config="resource_group_name=${{vars.INFRA_RESOURCE_GROUP_NAME}}" \
          -upgrade
          
      - name:  'Terraform Plan'
        run:  cd ${{GITHUB.workspace}}/deploy/terraform; terraform plan


        
      - name:  Terraform Apply
        run:  cd ${{GITHUB.workspace}}/deploy/terraform; terraform apply -auto-approve -input=false
